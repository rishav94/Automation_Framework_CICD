package rishavPortfolio.TestComponents;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.charset.StandardCharsets;
import java.time.Duration;
import java.util.HashMap;
import java.util.List;
import java.util.Properties;

import javax.print.DocFlavor.URL;

import org.apache.commons.io.FileUtils;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebDriver.Window;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.firefox.FirefoxOptions;
import org.openqa.selenium.remote.CapabilityType;
import org.openqa.selenium.remote.CommandExecutor;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.BeforeTest;

import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.reporter.ExtentSparkReporter;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import io.github.bonigarcia.wdm.WebDriverManager;
import rishavPortfolio.Data.DataReader;
import rishavPortfolio.PageObjects.LandingPage;

public class BaseTest {
	public WebDriver driver;
	public LandingPage landingPage;

	public WebDriver initlizeDriver() throws IOException, URISyntaxException {
		// properties class

		Properties property = new Properties();
		FileInputStream fil = new FileInputStream(
				System.getProperty("user.dir") + "/src/test/java/rishavPortfolio/Resources/GlobalData.properties");
		property.load(fil);
		String browserName = System.getProperty("Browser") != null ? System.getProperty("Browser")
				: property.getProperty("Browser");

		// Initialize Grid browser driver
		if (property.getProperty("platform").equalsIgnoreCase("grid")) {
			String hubURL = property.getProperty("HubLink");
			if (hubURL == null || hubURL.isEmpty()) {
				throw new IllegalArgumentException("HubLink property must be defined in the GobalData.prop file.");
			}
			DesiredCapabilities capabilities = new DesiredCapabilities();
			if (browserName.equalsIgnoreCase("chrome")) {
				ChromeOptions options = new ChromeOptions();
				capabilities.setCapability(ChromeOptions.CAPABILITY, options);
				capabilities.setBrowserName("chrome");
			} else if (browserName.equalsIgnoreCase("firefox")) {
				FirefoxOptions options = new FirefoxOptions();
				capabilities.setCapability(FirefoxOptions.FIREFOX_OPTIONS, options);
				capabilities.setBrowserName("firefox");
			} else {
				throw new IllegalArgumentException("Unsupported browser: " + browserName);
			}
			driver = new RemoteWebDriver((CommandExecutor) new URL(hubURL), capabilities);
		} else // Initialize the local browser driver when platform is not grid
		{
			if (browserName != null && browserName.equalsIgnoreCase("chrome")) {
				ChromeOptions options = new ChromeOptions();
				WebDriverManager.chromedriver().setup();

				if (browserName.contains("headless")) {
					options.addArguments("headless");
					options.addArguments("window-size=1440,900"); // Ensure proper window size in headless mode
				}

				driver = new ChromeDriver();

				if (!browserName.contains("headless")) {
					driver.manage().window().maximize(); // Maximize window for non-headless
				}
			} else if (browserName != null && browserName.equalsIgnoreCase("firefox")) {
				WebDriverManager.firefoxdriver().setup(); // Dynamic setup for geckodriver
				driver = new FirefoxDriver();
				driver.manage().window().maximize(); // Maximize window for all Firefox cases
			} else {
				throw new IllegalArgumentException("Unsupported browser: " + browserName);
			}
		}

		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(3));
		return driver;

	}

	// DataReader
	public List<HashMap<String, String>> getJsonDataToMap(String path) throws IOException {
		// read json to string
		String jsonContent = FileUtils.readFileToString(new File(path), StandardCharsets.UTF_8);
		// String to Hashmap Jackson databind
		ObjectMapper mapper = new ObjectMapper();
		List<HashMap<String, String>> data = mapper.readValue(jsonContent,
				new TypeReference<List<HashMap<String, String>>>() {
				});
		return data;
	}

	// take Screenshot
	public String getScreenshot(String testCaseName) throws IOException {
		TakesScreenshot ts = (TakesScreenshot) driver;
		File source = ts.getScreenshotAs(OutputType.FILE);
		File file = new File(System.getProperty("user.dir") + "/reports/" + testCaseName + ".png");
		FileUtils.copyFile(source, file);
		return System.getProperty("user.dir") + "/reports/" + testCaseName + ".png";

	}

	@BeforeMethod(alwaysRun = true)
	public LandingPage launchApplication() throws IOException, URISyntaxException {

		driver = initlizeDriver();
		landingPage = new LandingPage(driver);
		landingPage.goTo();
		return landingPage;
	}

	@AfterMethod(alwaysRun = true)
	public void teardown() {
		driver.quit();
	}

}
